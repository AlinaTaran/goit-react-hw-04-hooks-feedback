{"version":3,"sources":["components/Statistics/Statistics.js","components/Section/Section.js","components/Feedback/FeedbackOptions.js","components/Notification/Notification.js","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","protoType","PropTypes","number","isRequired","positiveliercentage","Section","title","children","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","Math","round","countPositiveFeedbackPercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAEMA,EAAa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,mCACE,+BACE,wCAAWJ,KACX,2CAAcC,KACd,sCAASC,KACT,yCAAYC,KACZ,qDAAwBC,EAAxB,aAMRL,EAAWM,UAAY,CACrBL,KAAMM,IAAUC,OAAOC,WACvBP,QAASK,IAAUC,OAAOC,WAC1BN,IAAKI,IAAUC,OAAOC,WACtBL,MAAOG,IAAUC,OAAOC,WACxBC,oBAAqBH,IAAUC,OAAOC,YAGzBT,QCRAW,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCQQC,EAZS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OAAOD,EAAQE,KAAI,SAAAC,GAAM,OACvB,wBAAQC,KAAK,SAAsBC,QAAS,kBAAMJ,EAAgBE,IAAlE,SACGA,GADwBA,OCMhBG,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KC+DEC,MA5Df,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNvB,EADM,KACAwB,EADA,OAEiBD,mBAAS,GAF1B,mBAENtB,EAFM,KAEGwB,EAFH,OAGSF,mBAAS,GAHlB,mBAGNrB,EAHM,KAGDwB,EAHC,KAwBPC,EAAqB,WACzB,OAAO3B,EAAOC,EAAUC,GAQpBC,EAAQwB,IACRvB,EANkC,WACtC,IAAMD,EAAQwB,IACd,OAAOC,KAAKC,MAAO7B,EAAOG,EAAS,KAIV2B,GAC3B,OACE,qCACE,cAAC,EAAD,CAASnB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEG,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAnCe,SAAAG,GACrB,OAAQA,GACN,IAAK,OACHM,GAAQ,SAAAxB,GAAI,OAAIA,EAAO,KACvB,MAEF,IAAK,UACHyB,GAAW,SAAAxB,GAAO,OAAIA,EAAU,KAChC,MAEF,IAAK,MACHyB,GAAO,SAAAxB,GAAG,OAAIA,EAAM,KACpB,MAEF,QACE,aAuBF,cAAC,EAAD,CAASS,MAAM,aAAf,SACGR,EAAQ,EACP,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,IAGtB,cAAC,EAAD,CAAciB,QAAQ,4BCvDhCU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.440412ae.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <>\r\n      <ul>\r\n        <li>Good: {good}</li>\r\n        <li>Neutral: {neutral}</li>\r\n        <li>Bad:{bad}</li>\r\n        <li>Total: {total}</li>\r\n        <li>positive feedback: {positivePercentage}%</li>\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nStatistics.protoType = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positiveliercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return options.map(option => (\r\n    <button type=\"button\" key={option} onClick={() => onLeaveFeedback(option)}>\r\n      {option}\r\n    </button>\r\n  ));\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\nexport default FeedbackOptions;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n  return <p>{message}</p>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import { useState } from 'react';\nimport Statistics from './components/Statistics';\nimport Section from './components/Section';\nimport Feedback from './components/Feedback';\nimport Notification from './components/Notification';\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleFeedback = type => {\n    switch (type) {\n      case 'good':\n        setGood(good => good + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(neutral => neutral + 1);\n        break;\n\n      case 'bad':\n        setBad(bad => bad + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const total = countTotalFeedback();\n    return Math.round((good / total) * 100);\n  };\n\n  const total = countTotalFeedback();\n  const positivePercentage = countPositiveFeedbackPercentage();\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <Feedback\n          options={['good', 'neutral', 'bad']}\n          onLeaveFeedback={handleFeedback}\n        />\n      </Section>\n      <Section title=\"Statistics\">\n        {total > 0 ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={positivePercentage}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}